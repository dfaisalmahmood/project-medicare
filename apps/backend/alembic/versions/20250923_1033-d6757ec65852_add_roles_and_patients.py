"""add roles and patients

Revision ID: d6757ec65852
Revises: fe48c48c62f9
Create Date: 2025-09-23 10:33:47.646794+00:00

"""
import app
from typing import Sequence, Union

from alembic import op, context
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'd6757ec65852'
down_revision: Union[str, Sequence[str], None] = 'fe48c48c62f9'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade():
    schema_upgrades()
    if context.get_x_argument(as_dictionary=True).get('data', None):
        data_upgrades()

def downgrade():
    if context.get_x_argument(as_dictionary=True).get('data', None):
        data_downgrades()
    schema_downgrades()

def schema_upgrades():
    """schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum('A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-', name='blood_group').create(op.get_bind())
    sa.Enum('male', 'female', 'other', name='gender').create(op.get_bind())
    sa.Enum('user', 'superadmin', name='role').create(op.get_bind())
    op.create_table('patients',
    sa.Column('id', app.core.types.GUID(length=36), nullable=False),
    sa.Column('user_id', app.core.types.GUID(length=36), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('dob', sa.Date(), nullable=True),
    sa.Column('gender', postgresql.ENUM('male', 'female', 'other', name='gender', create_type=False), nullable=True),
    sa.Column('blood_group', postgresql.ENUM('A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-', name='blood_group', create_type=False), nullable=True),
    sa.Column('ethnicity', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_patients_id'), 'patients', ['id'], unique=False)
    op.create_index(op.f('ix_patients_user_id'), 'patients', ['user_id'], unique=False)
    op.add_column('users', sa.Column('role', postgresql.ENUM('user', 'superadmin', name='role', create_type=False), server_default='user', nullable=False))
    op.create_index(op.f('ix_users_role'), 'users', ['role'], unique=False)
    # ### end Alembic commands ###

def schema_downgrades():
    """schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_role'), table_name='users')
    op.drop_column('users', 'role')
    op.drop_index(op.f('ix_patients_user_id'), table_name='patients')
    op.drop_index(op.f('ix_patients_id'), table_name='patients')
    op.drop_table('patients')
    sa.Enum('user', 'superadmin', name='role').drop(op.get_bind())
    sa.Enum('male', 'female', 'other', name='gender').drop(op.get_bind())
    sa.Enum('A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-', name='blood_group').drop(op.get_bind())
    # ### end Alembic commands ###

def data_upgrades():
    """Add any optional data upgrade migrations here!"""
    pass

def data_downgrades():
    """Add any optional data downgrade migrations here!"""
    pass